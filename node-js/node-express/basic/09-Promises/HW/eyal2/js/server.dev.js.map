{"version":3,"sources":["server.js"],"names":["app","port","process","env","PORT","use","get","req","res","console","log","GetLangFromAPI","AllLangs","send","post","detectLang","body","message","fromLang","toLang","translate","transaction","text","then","response","lang","json","err","error","languages","fromLng","toLng","massage","textToTranslate","method","headers","translatedMessage","responseData","translatedText","listen"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { json } from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport fetch from 'node-fetch';\r\nimport { encode } from 'url-encode-decode';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\napp.use(cookieParser());\r\napp.use(json());\r\napp.use('public');\r\n\r\napp.get('/getLang', async (req, res) => {\r\n  console.log('in the getLang')  \r\n  const AllLangs = await GetLangFromAPI();\r\n    res.send( AllLangs );\r\n});\r\n\r\n\r\n\r\napp.post('/SendTranslation', async (req, res) => {\r\n  \r\n  //const fromLang = req.body.formlang;\r\n  const fromLang = await detectLang(req.body.message);\r\n  console.log(`detectLang: ${fromLang}`)\r\n   try {\r\n    const {fromLang, toLang,message} = req.body;   \r\n    const transaction = await translate(fromLang,toLang,message);\r\n   // console.log(transaction);\r\n    res.send({ transaction });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n});\r\n\r\nasync function detectLang(text){\r\n  let lang;\r\n await fetch(\"https://google-translate1.p.rapidapi.com/language/translate/v2/detect\", {\r\n    \"method\": \"POST\",\r\n    \"headers\": {\r\n      \"content-type\": \"application/x-www-form-urlencoded\",\r\n      \"accept-encoding\": \"application/gzip\",\r\n      \"x-rapidapi-key\": \"2dae7de7a8msh9ca6fa97f167561p1494d2jsn956ba9663ea0\",\r\n      \"x-rapidapi-host\": \"google-translate1.p.rapidapi.com\"\r\n    },\r\n    \"body\": {\r\n      \"q\": `${text}`\r\n    }\r\n  })\r\n  .then(response => {\r\n   // console.log(response);\r\n    lang = response;\r\n  }).then((response) => response.json({ response }))\r\n  .catch(err => {\r\n    console.error(err);\r\n  });\r\n  return lang;\r\n}\r\n\r\nasync function GetLangFromAPI(){\r\n  let languages;\r\n    await fetch(`https://ws.detectlanguage.com/0.2/languages`)\r\n    .then((response) => response.json({ response }))\r\n    .then((response) => {\r\n      languages = response;\r\n      console.log('ok' ,response )\r\n      \r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n  return languages;\r\n};\r\n\r\nconst translate = async (fromLng, toLng, massage) => {\r\n  let translatedMessage;\r\n  let textToTranslate = encode(massage);\r\n  await fetch(\r\n    `https://translated-mymemory---translation-memory.p.rapidapi.com/api/get?langpair=${fromLng}%7C${toLng}&q=${textToTranslate}&mt=1&onlyprivate=1&de=a%40b.c`,\r\n    {\r\n      method: 'GET',\r\n      headers: {\r\n        'x-rapidapi-key': '2dae7de7a8msh9ca6fa97f167561p1494d2jsn956ba9663ea0',\r\n        'x-rapidapi-host':\r\n          'translated-mymemory---translation-memory.p.rapidapi.com',\r\n      },\r\n    }\r\n  )\r\n    .then((response) => response.json({ response }))\r\n    .then((response) => {\r\n      translatedMessage = response.responseData.translatedText;\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n  return translatedMessage;\r\n};\r\n\r\napp.listen(port, () => {\r\n  console.log(`Listen on port ${port}`);\r\n});\r\n"],"file":"server.dev.js"}